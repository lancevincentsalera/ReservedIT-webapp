@model ASI.Basecode.Services.ServiceModels.SettingViewModel

@{
    ViewData["Title"] = "Settings & Preferences";
}

@section styles {
    <link rel="stylesheet" href="~/css/admindashboard.css" />
    <link rel="stylesheet" href="~/css/setting.css" />
}

<div class="dashboard-header">
    <h1>Settings & Preferences</h1>
</div>

<div class="table-container">
    <div class="setting">
        <div class="table-column">
            <div class="basic-information">
                <h2>Basic Information</h2>
                <div>
                    <div class="form-outline mb-4">
                        <label class="form-label" for="full-name">Full Name</label>
                        <input class="form-control" type="text" id="full-name" value="@HttpContextAccessor.HttpContext.Session.GetString("UserName")" disabled>
                    </div>
                    <div class="form-outline mb-4">
                        <label class="form-label" for="email">Email</label>
                        <input class="form-control" type="email" id="email" value="@Html.DisplayFor(model => model.User.Email)" disabled>
                    </div>
                    <div class="form-outline mb-4">
                        <label class="form-label" for="role">Role</label>
                        <input class="form-control" type="text" id="role" value="@(Model.User.Role.RoleName.Substring(5, 1).ToUpper() + Model.User.Role.RoleName.Substring(6).ToLower())" disabled>
                    </div>
                    <form asp-action="EditUserPassword" method="post" id="user-password-form">
                        <input asp-for="UserId" name="UserId" id="UserId" type="text" value=@Model.UserId hidden>
                        <div class="form-outline mb-4">
                            <label class="form-label" for="Password">Change Password</label>
                            <div class="password-container">
                                <input type="password" id="passwordInput" class="form-control"
                                       asp-for="Password" placeholder="Enter password" />
                                <span class="input-group-text toggle-password" onclick="togglePasswordVisibility('passwordInput', this)">
                                    <img class="toggle-pic" src="@Url.Content("~/img/eye.svg")" />
                                </span>
                            </div>
                            <span asp-validation-for="Password" class="text-danger"></span>
                        </div>
                        <div class="form-outline mb-4">
                            <label class="form-label" for="ConfirmPassword">Confirm Password</label>
                            <div class="password-container">
                                <input type="password" id="confirmPasswordInput" class="form-control"
                                       asp-for="ConfirmPassword" placeholder="Enter password" />
                                <span class="input-group-text toggle-password" onclick="togglePasswordVisibility('confirmPasswordInput', this)">
                                    <img class="toggle-pic" src="@Url.Content("~/img/eye.svg")" />
                                </span>
                            </div>
                            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="table-column">
            <div class="notifications">
                <h2>Notifications</h2>

                <div class="notification-option">
                    <h5>
                        Successful Booking
                        <label class="switch">
                            <input type="checkbox" id="booking-success-checkbox" checked=@(Model.BookingSuccess == 1)>
                            <span class="slider"></span>
                        </label>
                    </h5>
                    <h6>Notify when booking is sucessfully created</h6>
                </div>

                <div class="notification-option">
                    <h5 for="booking-status-change" aria-labelledby="booking-status-change">
                        Booking Status
                        <label class="switch">
                            <input type="checkbox" id="booking-status-change-checkbox" checked=@(Model.BookingStatusChange == 1)>
                            <span class="slider"></span>
                        </label>
                    </h5>
                    <h6>Notify when booking status changes</h6>
                </div>

                <div class="notification-option">
                    <h5 for="booking-reminder" aria-labelledby="booking-reminder" id="set-reminders">
                        Set Reminders
                    </h5>
                    <h6 id="set-reminders-description">Set email reminders before your booking</h6>
                    <select id="booking-reminder" onchange="handleReminderChange()">
                        <option value=0 id="booking-reminder-none" selected>None</option>
                        <option value=900 id="booking-reminder-15-mins" selected>15 mins</option>
                        <option value=1800 id="booking-reminder-30-mins">30 mins</option>
                        <option value=3600 id="booking-reminder-1-hour">1 hour</option>
                        <option value="custom" id="booking-reminder-custom">Custom</option>
                    </select>
                    <div id="booking-reminder-custom-time" hidden style="">
                        <input type="number" id="days" min=0 max=31 value=1 oninput="limitTime(this)">Days
                        <input type="number" id="hours" min=0 max=24 value=0 oninput="limitTime(this)">Hours
                    </div>
                </div>
            </div>


            <div class="booking-preferences">
                <h2>Booking Preferences</h2>
                <div class="notification-option">
                    <h5 for="booking-duration" aria-labelledby="booking-duration" id="duration">
                        Duration
                    </h5>
                    <h6 id="duration-description">Set default booking duration</h6>
                    <div class="booking-duration">
                        <div id="booking-duration-time">
                            <input type="number" id="hours" min=0 max=8 value="" oninput="limitTime(this)"> Hours
                            <input type="number" id="minutes" min=0 max=59 value=0 oninput="limitTime(this)"> Minutes
                        </div>
                    </div>
                    <div class="save-button">
                        <button type="button" class="btn btn-custom" onclick="sendData()">Save Changes</button>
                    </div>
                </div>
            </div>


        </div>
    </div>
</div>

@section Scripts {
    <script>

        function sendData() {
            const bookingSuccessChecked = document.getElementById('booking-success-checkbox').checked ? 1 : 0;
            const bookingStatusChangeChecked = document.getElementById('booking-status-change-checkbox').checked ? 1 : 0;
            const bookingReminderSeconds = parseInt(calculateTotalSecondsBookingReminder());
            const bookingDurationSeconds = parseInt(calculateTotalSecondsBookingDuration());
            const password = document.getElementById('passwordInput').value.trim();
            const confirmPassword = document.getElementById('confirmPasswordInput').value.trim();
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$/;

            function calculateTotalSecondsBookingReminder() {
                const selectElement = document.getElementById('booking-reminder');
                const daysInput = parseInt($('#booking-reminder-custom-time #days').val());
                const hoursInput = parseInt($('#booking-reminder-custom-time #hours').val());

                if (selectElement.value === 'custom') {
                    const totalSeconds = (daysInput * 24 * 60 * 60) + (hoursInput * 60 * 60);
                    return totalSeconds;
                }
                return selectElement.value;
            }

            function calculateTotalSecondsBookingDuration() {
                const selectElement = document.getElementById('booking-reminder');
                const hoursInput = parseInt($('#booking-duration-time #hours').val());
                const minutesInput = parseInt($('#booking-duration-time #minutes').val());

                const totalSeconds = (hoursInput * 60 * 60) + (minutesInput * 60);
                return totalSeconds;
            }

            function areValuesEqual(obj1, obj2) {
                const keys1 = Object.keys(obj1);
                const keys2 = Object.keys(obj2);

                if (keys1.length !== keys2.length) return false; // Different number of properties

                for (let key of keys1) {
                    if (obj1[key] !== obj2[key]) {
                        return false; // Values differ
                    }
                }

                return true; // All values are equal
            }

            const data = {
                SettingId: @Model.SettingId,
                UserId: @Model.UserId,
                BookingSuccess: bookingSuccessChecked,
                BookingStatusChange: bookingStatusChangeChecked,
                BookingReminder: bookingReminderSeconds,
                BookingDuration: bookingDurationSeconds
            };

            const modelData = {
                SettingId: @Model.SettingId,
                UserId: @Model.UserId,
                BookingSuccess: @Model.BookingSuccess,
                BookingStatusChange: @Model.BookingStatusChange,
                BookingReminder: @Model.BookingReminder,
                BookingDuration: @Model.BookingDuration
                                                            };

            if (!areValuesEqual(data, modelData)) {  // Check if user changed settings before saving
                fetch(`/Setting/EditSetting/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Success:', data);
                        toastr.success('Setting updated successfully!');
                        setTimeout(function () {
                            location.reload(true);
                        }, 1500);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        toastr.error('Error updating setting: ' + String(error));
                    });
            } else if (areValuesEqual(data, modelData)) {
                toastr.error('Error updating setting: No changes detected!');
            }

            if (password && confirmPassword) { // Password Validation
                if (password != confirmPassword)
                    toastr.error("Password must match!");
                else if (password == confirmPassword) {
                    if (!passwordRegex.test(password))
                        toastr.error("Password must contain at least one lowercase letter, one uppercase letter, one digit, one special character, and be at least 8 characters long.");
                    else if (passwordRegex.test(password))
                        document.getElementById("user-password-form").submit();
                }
            }
        }


        window.onload = () => {
            showCustomTime();
            showDefaultDuration();
            // Default option selection of booking-reminder based on user settings
            function showCustomTime() {
                const select = document.getElementById("booking-reminder");
                const timeInput = document.getElementById("booking-reminder-custom-time");

                let bookingReminder = parseInt(@Model.BookingReminder);

                if (![0, 900, 1800, 3600].includes(bookingReminder)) {
                    select.value = 'custom';
                    handleReminderChange();
                    const secondToDay = parseInt(bookingReminder / (24 * 60 * 60));
                    const secondToHour = parseInt((bookingReminder % (24 * 60 * 60) / (60 * 60)));
                    $('#booking-reminder-custom-time #days').val(secondToDay);
                    $('#booking-reminder-custom-time #hours').val(secondToHour);
                } else {
                    select.value = bookingReminder;
                }
            }

            function showDefaultDuration() {
                let bookingDuration = parseInt(@Model.BookingDuration);

                const secondToHour = parseInt(bookingDuration / (60 * 60));
                const secondToMinutes = parseInt((bookingDuration % (60 * 60)) / 60);

                $('#booking-duration-time #hours').val(secondToHour);
                $('#booking-duration-time #minutes').val(secondToMinutes);


            }
        }

        // Dropdown number input for custom booking reminders
        function handleReminderChange() {
            const select = document.getElementById("booking-reminder");
            const timeInput = document.getElementById("booking-reminder-custom-time");

            if (select.value === 'custom') {
                timeInput.hidden = false;
                $('#booking-reminder-custom-time .html-duration-picker-input-controls-wrapper').show();
                $('#booking-reminder-custom-time .html-duration-picker-input-controls-wrapper').css({
                    'width': '224px',
                    'margin-left': '0px',
                    'margin-right': '0px'
                });
                $('.controls').css({
                    'left': '204px',
                    'height': '28px'
                });
            } else {
                timeInput.hidden = true;
                $('#booking-reminder-custom-time .html-duration-picker-input-controls-wrapper').hide();
            }
        }

        function printValue(element) {
            console.log(element.value);
        }

        // Prevent exponential values for input type number
        $("input[type=number]").on("keydown", function (e) {
            var invalidChars = ["-", "+", "e"];
            if (invalidChars.includes(e.key)) {
                e.preventDefault();
            }
        });

        $(document).ready(function () {
            $('#booking-duration-time').on('change', function () {
                limitTotalTime();
            });

            // Function to enforce total time limit (8 hours max)
            function limitTotalTime() {
                const hours = parseInt($('#booking-duration-time #hours').val());
                const minutes = parseInt($('#booking-duration-time #minutes').val());

                if (hours === 8 && minutes > 0) {
                    $('#minutes').val(0);
                }
            }
        });

        // Function to enforce time limit
        function limitTime(input) {
            if (parseInt(input.value) < parseInt(input.min)) input.value = parseInt(input.min);
            if (parseInt(input.value) > parseInt(input.max)) input.value = parseInt(input.max);
        }

    </script>
}