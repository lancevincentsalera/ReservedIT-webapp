@using ASI.Basecode.Services.ServiceModels

@{
    ViewData["Title"] = "Reports";
    var barChartData = ViewData["BarChartData"] as List<int>;
    var lineChartData = ViewData["LineChartData"] as List<int>;
    var userBookingFrequencies = ViewData["UserBookingFrequencies"] as List<UserBookingFrequency>;
    var roomUsageSummaries = ViewData["RoomUsageSummaries"] as List<RoomUsageSummary>;
    
}
@section styles {
    <link rel="stylesheet" href="~/css/reportsAndAnalytics.css" />
}

<div class="dashboard-header">
    <h1>Reports & Analytics</h1>
</div>
<div class="reports-container">
    <div class="first-header">
        <h1>Booking Summary</h1>
    </div>
    <div class="container-first">
        <div class="graph-header">
            <div>
                <h2>Room Booking Overview</h2>
            </div>
        </div>
        <div class="graphs">
            <canvas id="barChart"></canvas>
        </div>
    </div>
    <div class="container-first">
        <div class="graph-header">
            <div>
                <h2>Daily Booking Trends</h2>
            </div>
        </div>
        <div class="graphs">
            <canvas id="lineChart"></canvas> <!-- Added line chart canvas -->
        </div>
    </div>
    <div class="container-first">
        <div class="graph-header">
            <div>
                <h2>User Booking Frequency</h2>
                @*Search Bar*@
            </div>
        </div>
        <div class="table-userbooking">
            <div class="tablereport-header">
                <div class="report-cell">User Name</div>
                <div class="report-cell">No. of Bookings</div>
                <div class="report-cell">Last Booking Date</div>
                <div class="report-cell">Total Duration (Hrs)</div>
                <div class="report-cell">Most Booked Room</div>
            </div>
            <div class="tablereport-body">
                <!-- Rows will be added here dynamically or later -->
                @foreach (var user in userBookingFrequencies)
                {
                    <li class="user-row">
                        <div class="user-cell" data-label="User Name">@Html.DisplayFor(modelItem => user.UserName)</div>
                        <div class="user-cell" data-label="No. of Bookings">@Html.DisplayFor(modelItem => user.NoOfBookings)</div>
                        <div class="user-cell" data-label="Last Booking Date">@Html.DisplayFor(modelItem => user.LastBookingDate)</div>
                        <div class="user-cell" data-label="Total Duration(Hrs)">@Html.DisplayFor(modelItem => user.TotalDuration)</div>
                        <div class="user-cell" data-label="Most Booked Room">@Html.DisplayFor(modelItem => user.MostBookedRoom)</div>
                    </li>
                }
            </div>
        </div>
    </div>
    <div class="first-header">
        <h1>Room Usage Report</h1>
    </div>
    <div class="container-first">
        <div class="graph-header">
            <div>
                <h2>Room Usage Summary</h2>
                @*Search Bar*@
            </div>
        </div>
        <div class="table-userbooking">
            <div class="tablereport-header">
                <div class="report-cell">Room Name</div>
                <div class="report-cell">Total Booking</div>
                <div class="report-cell">Peak Day</div>
                <div class="report-cell">Peak Time</div>
                <div class="report-cell">Total Duration (Hrs)</div>
            </div>
            <div class="tablereport-body">
                @foreach (var user in roomUsageSummaries)
                {
                    <li class="user-row">
                        <div class="user-cell" data-label="Room Name">@Html.DisplayFor(modelItem => user.RoomName)</div>
                        <div class="user-cell" data-label="Total No. Bookingss">@Html.DisplayFor(modelItem => user.TotalBooking)</div>
                        <div class="user-cell" data-label="Peak Day">@Html.DisplayFor(modelItem => user.PeakDay)</div>
                        <div class="user-cell" data-label="Peak Time">@Html.DisplayFor(modelItem => user.PeakTime)</div>
                        <div class="user-cell" data-label="Total Duration(Hrs)">@Html.DisplayFor(modelItem => user.TotalDuration)</div>
                    </li>
                }
                <div class="detail-table" style="display: none;">
                    <div class="detail-header">
                        <h2 style="text-align: center; font-weight: bold; font-size: 15px;">User Activity Detail</h2>
                    </div>
                    <div class="tablereport-header" style="font-size:15px;">
                        <div class="report-cell">User Name</div>
                        <div class="report-cell">Booking Date</div>
                        <div class="report-cell">Start Time</div>
                        <div class="report-cell">End Time</div>
                        <div class="report-cell">Duration</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<script src="~/js/reportsAndAnalytics.js"></script>
<script>

    function toggleDetail(row) {
        const detailTable = row.nextElementSibling;
        if (detailTable.style.display === "none" || detailTable.style.display === "") {
            detailTable.style.display = "block";
        } else {
            detailTable.style.display = "none";
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('barChart').getContext('2d');
        const ctx2 = document.getElementById('lineChart').getContext('2d'); // For the line chart
        const daysOfMonth = generateDaysOfMonth();

        const barchart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                datasets: [{
                    label: 'No. of Bookings', // Set to an empty string to remove the label
                    data: @Html.Raw(Json.Serialize(barChartData)).$values, // Use the data passed from the controller
                    borderColor: 'rgb(229, 158, 176)',
                    backgroundColor: 'rgb(229, 158, 176)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, // Allow resizing
                plugins: {
                    legend: {
                        display: true // Completely hide the legend
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Month'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'No. of Bookings'
                        },
                        beginAtZero: true
                    }
                }
            }
        });
        console.log(@Html.Raw(Json.Serialize(barChartData)).$values);

        // Line chart configuration
        const lineChart = new Chart(ctx2, {
            type: 'line',
            data: {
                labels: daysOfMonth, // Sample numeric x-axis values
                datasets: [{
                    label: 'No. of Daily Booking', // Set the label for the line graph
                    data: @Html.Raw(Json.Serialize(lineChartData)).$values, // Use the data passed from the controller
                    borderColor: 'rgb(229, 158, 176)',
                    backgroundColor: 'rgb(229, 158, 176)',
                    borderWidth: 2,
                    fill: false,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false // Hide the legend if not needed
                    }
                },
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Days'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Bookings'
                        },
                        beginAtZero: true
                            
                    }
                }
            }
        });
        setInterval(updateCharts, 60000); // 60000 ms = 1 minute
    });

    function generateDaysOfMonth() {
        const days = [];
        const currentDate = new Date();
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth(); // getMonth() returns 0-11

        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        const monthName = monthNames[month];

        // Get the number of days in the current month
        const daysInMonth = new Date(year, month + 1, 0).getDate();

        for (let day = 1; day <= daysInMonth; day++) {
            // Format day and month as MM-DD
            const formattedDay = `${monthName}-${day.toString().padStart(2, '0')}`;
            days.push(formattedDay);
        }

        return days;
    }

    function updateCharts() {
        const daysOfMonth = generateDaysOfMonth();

        // Update Bar Chart
        barChart.data.labels = daysOfMonth;
        barChart.update();

        // Update Line Chart
        lineChart.data.labels = daysOfMonth;
        lineChart.update();
    }

    function toggleDetail(row) {
        const detailTable = row.nextElementSibling;
        if (detailTable.style.display === "none" || detailTable.style.display === "") {
            detailTable.style.display = "block";
        } else {
            detailTable.style.display = "none";
        }
    }
</script>
