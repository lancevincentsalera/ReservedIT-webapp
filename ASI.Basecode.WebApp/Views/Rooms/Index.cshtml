@model ASI.Basecode.Services.ServiceModels.RoomViewModel;

@{
    ViewData["Title"] = "Rooms";
}

@section styles {
    <link rel="stylesheet" href="~/css/roomsCard.css" />
    <link rel="stylesheet" href="~/css/viewRoomCard.css" />
    <link rel="stylesheet" href="~/css/bookingModal.css" />
}

<div class="room-header">
    <div id="searchbar">
        @Html.Partial("_SearchBarPartial")
    </div>
    <div class="room-title-description">
        <h1>Rooms</h1>
        <p>Find Meeting Rooms for your taste and needs.</p>
    </div>
</div>

<button class="carousel-button left" onclick="moveLeft()">&#10094;</button>
<div class="container-wrapper">
    <div class="container" id="container">
        @foreach (var room in Model.roomList)
        {
            <div class="card" data-room-name="@room.RoomName" data-room-description="@room.Description" data-room-location="@room.Location" data-room-capacity="@room.Capacity" data-room-equipments="@room.Equipments">
                <div class="card-content" onclick="displayModal('#viewRoomCardModal'); getRoomModalDetails(this, '#viewRoomCardModal', 'GetRoomDetails', 'Rooms')" data-id="@room.RoomId">
                    <h3>@room.RoomName</h3>
                    <img src="@room.Thumbnail" alt="@room.RoomName" class="card-image">
                    <h1>Description</h1>
                    <p>@room.Description</p>
                    <div class="details">
                        <div class="detail-item">
                            <span class="font-weight-bold">Location</span>
                            @*<img src="~/img/Logo1.png" alt="Logo">*@
                            <span>@room.Location</span>
                        </div>
                        <div class="detail-item">
                            <span class="font-weight-bold">Capacity</span>
                            @*@<img src="~/img/Logo1.png" alt="Logo">*@
                            <span>@room.Capacity</span>
                        </div>
                        <div class="detail-item">
                            <span class="font-weight-bold">Equipment</span>
                            @*<img src="~/img/Logo1.png" alt="Logo">*@
                            <span>@room.Equipments</span>
                        </div>
                    </div>
                </div>
                <div class="btn-book">
                    <button type="button" class="book-button" data-toggle="modal" data-target="#createBookingModal" data-id="@room.RoomId" data-name="@room.RoomName">
                        Book
                    </button>
                </div>
            </div>

        }
    </div>
</div>
<button class="carousel-button right" onclick="moveRight()">&#10095;</button>

@Html.Partial("_ViewRoomCardModal")
@Html.Partial("_CreateBookingModal", Model.BookingViewModel)

@section scripts {
    <script>
        document.getElementById("searchInput").addEventListener("keyup", filterRoom);
    </script>

    <script>
        $('.book-button').click(function () {
            console.log($('.book-button'))
            let id = $(this).data('id');
            let name = $(this).data('name');

            console.log('clicked', id, name);

            $('#roomId').val(id);
            $('#roomName').val(name);
        })

        let currentPosition = 0;
        const container = document.querySelector('.container');
        const totalCards = @Model.roomList.Count();
        const visibleCards = 3;
        const cardWidth = 310; // 280px card + 30px gap

        function moveLeft() {
            if (currentPosition > 0) {
                currentPosition--;
                updateCarousel();
            }
        }

        function moveRight() {
            if (currentPosition < totalCards - visibleCards) {
                currentPosition++;
                updateCarousel();
            }
        }

        function updateCarousel() {
            container.style.transform = `translateX(-${currentPosition * cardWidth}px)`;
        }
    </script>

    <script>

        // instantiate flatpickr and prevent submission on error found
        $(document).ready(function () {
            $('#createBookingForm').on('submit', function (e) {
                if ($('#errorMessage').text().trim() !== '' ||
                    $('#startDate').val().trim() === '' ||
                    $('#endDate').val().trim() === '') {
                    console.log('hereeeeeeeeeeeeeeee=-=============')
                    e.preventDefault();
                    alert('Please validate the input fields with correct values before submitting the form.');
                }
            });

            const now = new Date();
            let newDate = new Date(now);

            newDate.setHours(newDate.getHours() + 2);

            let currentHour = newDate.getHours();
            let currentMinute = Math.ceil(newDate.getMinutes() / 15) * 15;

            if (currentMinute === 60) {
                currentHour = (currentHour + 1) % 24;
                currentMinute = 0;
            }

            // Handle edge case where adding 2 hours crosses midnight
            if (newDate.getDate() > now.getDate()) {
                newDate.setHours(currentHour);
                newDate.setMinutes(currentMinute);
            }

            const minTime = `${String(currentHour).padStart(2, '0')}:${String(currentMinute).padStart(2, '0')}`;

            var configStart = {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                altInput: true,
                altFormat: "F j, Y (h:i K)",
                minuteIncrement: 15,
                minDate: newDate,
                minTime: minTime,
                onReady: function (selectedDates, dateStr, instance) {
                    instance.setDate(newDate);
                    setDefaultBookingDuration();
                },
                onChange: function (selectedDates, dateStr, instance) {
                    const selectedDate = selectedDates[0];
                    if (selectedDate && selectedDate.toDateString() === newDate.toDateString()) {
                        instance.set('minTime', minTime);
                    } else {
                        instance.set('minTime', '00:00');
                    }

                    setDefaultBookingDuration();
                    checkBookingConflict();
                }

            };

            var configEnd = {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                altInput: true,
                altFormat: "F j, Y (h:i K)",
                minuteIncrement: 15,
                minDate: newDate,
                minTime: minTime,
                onChange: function (selectedDates, dateStr, instance) {
                    const selectedDate = selectedDates[0];
                    if (selectedDate && selectedDate.toDateString() === newDate.toDateString()) {
                        instance.set('minTime', minTime);
                    } else {
                        instance.set('minTime', '00:00');
                    }

                    checkBookingConflict();
                }

            };

            flatpickr("#startDate", configStart);
            flatpickr("#endDate", configEnd);
        });
    </script>

    <script>
        function setDefaultBookingDuration() {
            // Get the start date value and create a Date object
            var startDateValue = $('#startDate').val();
            var defaultEndDate = new Date(startDateValue);

            // Add seconds to the date
            defaultEndDate.setSeconds(defaultEndDate.getSeconds() + @Model.BookingDuration);

            // Format the date and time into readable string
            var formattedDateTime = formatDateTime(defaultEndDate);

            defaultEndDate = defaultEndDate.getFullYear() + '-' +
                String(defaultEndDate.getMonth() + 1).padStart(2, '0') + '-' +
                String(defaultEndDate.getDate()).padStart(2, '0') + 'T' +
                String(defaultEndDate.getHours()).padStart(2, '0') + ':' +
                String(defaultEndDate.getMinutes()).padStart(2, '0');

            // Set the value of endDate
            $('#endDate').val(defaultEndDate);

            // Set text of endDate input
            $('#createBookingForm .form-row .form-group.col-md-6:nth-of-type(2) input:nth-of-type(2)').val(formattedDateTime);
        }

        function formatDateTime(date) {
            // Format date as "YYYY-MM-DD HH:mm"
            let datePart = date.toISOString().slice(0, 10); // YYYY-MM-DD
            let timePart = date.toTimeString().slice(0, 5); // HH:mm

            // Create a formatted date string
            let formattedDate = date.toLocaleDateString('en-US', {
                year: 'numeric', month: 'long', day: 'numeric'
            });

            // Create a formatted time string with AM/PM
            let formattedTime = date.toLocaleTimeString('en-US', {
                hour: 'numeric', minute: 'numeric', hour12: true
            });

            // Combine formatted date and time
            return `${formattedDate} (${formattedTime})`;
        }
    </script>
}
