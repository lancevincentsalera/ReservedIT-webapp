@using ASI.Basecode.Services.ServiceModels

@model RoomViewModel
@{
    ViewData["Title"] = "User Dashboard";
    IEnumerable<ASI.Basecode.Services.ServiceModels.RoomViewModel> rooms = ViewData["rooms"] as IEnumerable<ASI.Basecode.Services.ServiceModels.RoomViewModel>;
}

@{
    ViewData["Title"] = "Index";
}

@section styles {
    <link rel="stylesheet" href="~/css/admindashboard.css" />
    <link rel="stylesheet" href="~/css/roomModal.css" />
    <link rel="stylesheet" href="~/css/editRoomModal.css" />
}

<div class="dashboard-header">
    <h1>Rooms</h1>
    <div class="dashboard-header-right" style="margin-top:25px;">
        @Html.Partial("_SearchBarPartial")
        <button type="button" class="create-user-btn" data-toggle="modal" data-target="#createRoomModal"> <img src="~/img/add-logo.png" />Create Room</button>
    </div>
</div>
<div class="table-container">
    <div class="user-row header">
        <div class="user-cell"></div>
        <div class="user-cell">ROOM NAME</div>
        <div class="user-cell">DESCRIPTION</div>
        <div class="user-cell">CAPACITY</div>
        <div class="user-cell">LOCATION</div>
        <div class="user-cell">EQUIPMENTS</div>
        <div class="user-cell"></div>
    </div>
    <ul class="user-list">
        @foreach (var item in Model.roomList.Select((value , i ) => (value, i)))
        {
            var index = item.i + 1;
            <li class="user-row">
                <div class="user-cell" data-label="ROOM ID">@index</div>
                <div class="user-cell" data-label="ROOM NAME">@Html.DisplayFor(modelItem => item.value.RoomName)</div>
                <div class="user-cell" data-label="DESCRIPTION">@Html.DisplayFor(modelItem => item.value.Description)</div>
                <div class="user-cell" data-label="CAPACITY">@Html.DisplayFor(modelItem => item.value.Capacity)</div>
                <div class="user-cell" data-label="LOCATION">@Html.DisplayFor(modelItem => item.value.Location)</div>
                <div class="user-cell" data-label="DESCRIPTION">@Html.DisplayFor(modelItem => item.value.Equipments)</div>
                <div class="user-cell actions">
                    <div class="action-col">
                        <button type="button" class="btn-status" data-id="@item.value.RoomId" onclick="displayModal('#editRoomModal'); getRoomDetails(this, '#editRoomModal', 'GetRoomDetails', 'AARoom');">
                            <i class="fas fa-edit" style="color: #775965; font-size: 15px;"></i>
                        </button>
                        <span> | </span>
                        <button type="button" class="btn-status" data-id="@item.value.RoomId" onclick="displayModal('#confirmationRoomDeleteModal'); passId(this, '#confirmDeleteBtn');">
                            <i class="fas fa-trash-alt" style="color: #C90000; font-size: 15px;"></i>
                        </button>
                    </div>
                </div>
            </li>
        }

    </ul>
</div>
@Html.Partial("_RoomConfirmationModal")
@Html.Partial("_CreateRoomModal")
@Html.Partial("_EditRoomModal")

@section scripts {
    <script>
        document.getElementById("searchInput").addEventListener("keyup", filterList);
    </script>


    <script>
        // Thumbnail Preview
        function showImage(event, previewId) {
            const reader = new FileReader();
            reader.onload = function () {
                const output = document.getElementById(previewId);
                output.src = reader.result;
                output.style.display = 'block';

                const parent = output.closest('.custom-file-upload');
                const deleteButton = parent.querySelector('.delete-button');
                deleteButton.style.display = 'block';
                const uploadIcon = parent.querySelector('.upload-icon');
                uploadIcon.style.display = 'none';
            };
            reader.readAsDataURL(event.target.files[0]);
        }

        // Delete Thumbnail
        function deleteImage(inputId) {
            console.log("here========")
            const input = document.getElementById(inputId);
            const preview = document.getElementById(inputId + 'Preview');

            const parent = input.closest('.custom-file-upload');
            const deleteButton = parent.querySelector('.delete-button');
            const uploadIcon = parent.querySelector('.upload-icon');

            input.value = '';
            preview.src = '#';
            preview.style.display = 'none';
            deleteButton.style.display = 'none';
            uploadIcon.style.display = 'flex';
        }

        // Display file names
        function displayFileNames(event) {
            const files = event.target.files;
            const container = document.getElementById('fileNamesContainer');
            container.innerHTML = '';
            for (let i = 0; i < files.length; i++) {
                const fileName = document.createElement('div');
                fileName.textContent = files[i].name;
                container.appendChild(fileName);
            }
        }
    </script>
}


<!--Create Booking Modal Temporary Trigger Button (Please Delete Later)-->


@* @Html.Partial("_DatePicker") *@