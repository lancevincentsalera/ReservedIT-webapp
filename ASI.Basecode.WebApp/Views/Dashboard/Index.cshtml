@model ASI.Basecode.Services.ServiceModels.BookingViewModel
@using static ASI.Basecode.Resources.Constants.Enums;

@{
    ViewData["Title"] = "Dashboard";
}

@section styles {
    <link rel="stylesheet" href="~/css/managerdashboard.css" />
    <link rel="stylesheet" href="~/css/bookingModal.css" />
    <link rel="stylesheet" href="~/css/viewRoomCard.css" />
}

<div class="dashboard-header">
    <h1>Dashboard</h1>
</div>

<div class="table-container">
    <div class="table-header">
        Upcoming Bookings
    </div>
    <div class="user-row header">
        <div class="user-cell">Room Name</div>
        <div class="user-cell">Date</div>
        <div class="user-cell">Time From</div>
        <div class="user-cell">Time To</div>
        <div class="user-cell">Recurrence</div>
        <div class="user-cell"></div>
    </div>
    <ul class="user-list">
        @foreach (var item in Model.bookingList)
        {
            var date = item.StartDate.Value.ToString("dd MMMM yyyy");
            if(item.BookingStatus.Equals(BookingStatus.APPROVED.ToString()) || item.BookingStatus.Equals(BookingStatus.PENDING.ToString()))
            {
                var timeFrom = new DateTime(item.TimeFrom.Value.Ticks).ToString("h:mm tt").ToUpper();
                var timeTo = new DateTime(item.TimeTo.Value.Ticks).ToString("h:mm tt").ToUpper();
                <li class="user-row">
                    <div class="user-cell" data-label="Room Name">@Html.DisplayFor(modelItem => item.RoomName)</div>
                    <div class="user-cell" data-label="Date">@Html.DisplayFor(modelItem => date)</div>
                    <div class="user-cell" data-label="Time From">@Html.DisplayFor(modelItem => timeFrom)</div>
                    <div class="user-cell" data-label="Time To">@Html.DisplayFor(modelItem => timeTo)</div>
                    <div class="user-cell" data-label="Recurrence">
                        @if (item.Recurrence.Count() > 0)
                        {
                            @foreach (var recurrence in item.Recurrence)
                            {
                                var dayName = recurrence.DayOfWeek.DayName.Substring(0, 3);
                                @Html.DisplayFor(modelItem => dayName)
                                if (recurrence != item.Recurrence.Last())
                                {
                                    <text>, </text>
                                }
                            }
                        }
                        else if(item.Recurrence.Count() == 7)
                        {
                            <text>Daily</text>
                        }
                        else
                        {
                            <text>None</text>
                        }

                        @if (item.BookingStatus.Equals(BookingStatus.PENDING.ToString()))
                            {
                                <span style="color: #B5838E; font-weight: bold; font-size: 80%">&emsp;—&emsp;PENDING</span>
                            }
                    </div>
                    <div class="user-cell actions">
                        <div class="mr-20 hover-pointer dropdown-trigger" data-id="@item.BookingId">
                            <span class="ddicon">&#8942;</span>
                        </div>
                    </div>
                </li>
            }
        }

    </ul>
</div>

<div class="table-container recent">
    <div class="table-header">
        Recent Bookings
    </div>
    <div class="user-row header">
        <div class="user-cell">Room Name</div>
        <div class="user-cell">Date</div>
        <div class="user-cell">Time From</div>
        <div class="user-cell">Time To</div>
        <div class="user-cell">Recurrence</div>
        <div class="user-cell">Status</div>
    </div>
    <ul class="user-list">
        @foreach (var item in Model.bookingList)
        {
            if (item.BookingStatus.Equals(BookingStatus.COMPLETED.ToString()) || item.BookingStatus.Equals(BookingStatus.CANCELLED.ToString()))
            {
                var timeFrom = new DateTime(item.TimeFrom.Value.Ticks).ToString("h:mm tt").ToUpper();
                var timeTo = new DateTime(item.TimeTo.Value.Ticks).ToString("h:mm tt").ToUpper();
                <li class="user-row">
                    <div class="user-cell" data-label="Room Name">@Html.DisplayFor(modelItem => item.RoomName)</div>
                    <div class="user-cell" data-label="Date">@Html.DisplayFor(modelItem => item.StartDate)</div>
                    <div class="user-cell" data-label="Time From">@Html.DisplayFor(modelItem => timeFrom)</div>
                    <div class="user-cell" data-label="Time To">@Html.DisplayFor(modelItem => timeTo)</div>
                    <div class="user-cell" data-label="Recurrence">
                        @if (item.Recurrence.Count() > 0)
                        {
                            @foreach (var recurrence in item.Recurrence)
                            {
                                var dayName = recurrence.DayOfWeek.DayName.Substring(0, 3);
                                @Html.DisplayFor(modelItem => dayName)
                                if (recurrence != item.Recurrence.Last())
                                {
                                    <text>, </text>
                                }
                            }
                        }
                        else
                        {
                            <text>None</text>
                        }

                    </div>
                    <div class="user-cell" data-label="STATUS"><span class="status">@Html.DisplayFor(modelItem => item.BookingStatus)</span></div>
                </li>
            }
        }

    </ul>
</div>

<div class="dropdown-action">
    <ul>

        <li>
            <button type="button" class="btn-status" onclick="displayModal('#confirmationBookingCancelModal'); passId(this, '#confirmCancelBtn');">
                <i class="fas fa-circle" style="color: #FF0000; font-size: 10px;"></i> Cancel
            </button>
        </li>
        <li>
            <button type="button" class="btn-status" onclick="displayModal('#editBookingModal'); getBookingDetails(this, '#editBookingModal', 'GetBookingDetails', 'Dashboard');">
                <i class="fas fa-edit" style=" font-size: 10px;"></i> Edit
            </button>
        </li>
    </ul>
</div>

@Html.Partial("_EditBookingModal", new ASI.Basecode.Services.ServiceModels.BookingViewModel() { roomList = Model.roomList, Days = Model.Days })
@Html.Partial("_BookingsConfirmationModal")

@section scripts {
     <script>

        $(document).ready(function () {
            //console.log("Document is ready");
            // Toggle display of the custom-recur div

            $('#customButton').click( function () {
                console.log("Custom Button clicked");
                $('.custom-recur').toggle();
                $('#customButton').addClass('active');
                $('#scheduleOnceButton').removeClass('active');
            });

            $('#scheduleOnceButton').click(function () {
                console.log("Schedule Once Button clicked");
                $('.custom-recur').hide();
                $('#scheduleOnceButton').addClass('active');
                $('#customButton').removeClass('active');
            });

            const now = new Date();
            var currentHour = now.getHours();
            var currentMinute = now.getMinutes();

            var config = {
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                altInput: true,
                altFormat: "F j, Y (h:i K)",
                minuteIncrement: 15,
                minDate: new Date(),
                minTime: `${currentHour}:${currentMinute}`,
                onChange: function (selectedDates, dateStr, instance) {
                    const selectedDate = selectedDates[0];
                    if (selectedDate && selectedDate.toDateString() === now.toDateString()) {
                        instance.set('minTime', `${currentHour}:${currentMinute}`);
                    } else {
                        instance.set('minTime', '00:00');
                    }
                }

            };
            flatpickr("input[type=datetime-local]", config);
        });
        
    </script>

    <script>
        $('#scheduleOnceButton').click(function () {
            let checkbox = $('input[type="checkbox"]');
            checkbox.each(function () {
                $(this).prop('checked', false);
            });
        })
    </script>
}