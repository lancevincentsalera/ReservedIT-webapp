@model ASI.Basecode.Services.ServiceModels.BookingViewModel
@using static ASI.Basecode.Resources.Constants.Enums;

@{
    ViewData["Title"] = "Dashboard";
    var now = DateTime.Now;
    var todayAtMidnight = new DateTime(now.Year, now.Month, now.Day, 0, 0, 0);
    var startDateRange = todayAtMidnight.AddDays(-5);
    var endDateRange = todayAtMidnight.AddDays(5);
}

@section styles {
    <link rel="stylesheet" href="~/css/managerdashboard.css" />
    <link rel="stylesheet" href="~/css/bookingModal.css" />
}

<div class="dashboard-header">
    <h1>Dashboard</h1>
</div>

<div class="table-container">
    <div class="table-header">
        Upcoming Bookings
    </div>  
    <div class="user-row header">
        <div class="user-cell">Room Name</div>
        <div class="user-cell">Date</div>
        <div class="user-cell">Time From</div>
        <div class="user-cell">Time To</div>
        <div class="user-cell">Recurrence</div>
        <div class="user-cell">Status</div>
        <div class="user-cell"></div>
    </div>
    <ul class="user-list">
        @foreach (var item in Model.bookingList)
        {
            var combinedDateTime = item.StartDate.HasValue && item.TimeFrom.HasValue
            ? item.StartDate.Value.Add(item.TimeFrom.Value)
            : (DateTime?)null;
            bool isFromNowToFutureFiveDays = combinedDateTime >= todayAtMidnight && combinedDateTime <= endDateRange;
            var date = item.StartDate.Value.ToString("MMM dd, yyyy");
            if ((item.BookingStatus.Equals(BookingStatus.APPROVED.ToString()) || item.BookingStatus.Equals(BookingStatus.PENDING.ToString())) &&
                isFromNowToFutureFiveDays )
            {
                var timeFrom = new DateTime(item.TimeFrom.Value.Ticks).ToString("h:mm tt").ToUpper();
                var timeTo = new DateTime(item.TimeTo.Value.Ticks).ToString("h:mm tt").ToUpper();
                <li class="user-row">
                    <div class="user-cell" data-label="Room Name">@Html.DisplayFor(modelItem => item.RoomName)</div>
                    <div class="user-cell" data-label="Date">@Html.DisplayFor(modelItem => date)</div>
                    <div class="user-cell" data-label="Time From">@Html.DisplayFor(modelItem => timeFrom)</div>
                    <div class="user-cell" data-label="Time To">@Html.DisplayFor(modelItem => timeTo)</div>
                    <div class="user-cell" data-label="Recurrence">
                        @if(item.Recurrence.Count() == 7)
                        {
                            <text>Daily</text>
                        }

                        else if (item.Recurrence.Count() > 0)
                        {
                            @foreach (var recurrence in item.Recurrence)
                            {
                                var dayName = recurrence.DayOfWeek.DayName.Substring(0, 3);
                                @Html.DisplayFor(modelItem => dayName)
                                if (recurrence != item.Recurrence.Last())
                                {
                                    <text>, </text>
                                }
                            }
                        }
                        else
                        {
                            <text>None</text>
                        }
                    </div>
                    <div class="user-cell" data-label="STATUS">
                            <span class="status">@item.BookingStatus</span>

                    </div>
                    <div class="user-cell actions">
                        <div>
                            <div class="action-col">
                                <button type="button" class="btn-status" data-id="@item.BookingId" onclick="displayModal('#editBookingModal'); getBookingDetails(this, '#editBookingModal', 'GetBookingDetails', 'Dashboard');">
                                    <i class="fas fa-edit" style=" color:#775965; font-size: 15px;"></i>
                                </button>
                                <span> | </span>
                                <button type="button" class="btn-status" data-id="@item.BookingId" onclick="displayModal('#confirmationBookingCancelModal'); passId(this, '#confirmCancelBtn');">
                                    <i class="fas fa-cancel" style=" color:#C90000; font-size: 15px;"></i>
                                </button>
                            </div>
                    </div>
                </li>
            }
        }

    </ul>
</div>

<div class="table-container recent">
    <div class="table-header">
        Recent Bookings
    </div>
    <div class="user-row header">
        <div class="user-cell">Room Name</div>
        <div class="user-cell">Date</div>
        <div class="user-cell">Time From</div>
        <div class="user-cell">Time To</div>
        <div class="user-cell">Recurrence</div>
        <div class="user-cell">Status</div>
    </div>
    <ul class="user-list">
        @foreach (var item in Model.bookingList)
        {
            var combinedDateTime = item.EndDate.HasValue && item.TimeTo.HasValue
            ? item.EndDate.Value.Add(item.TimeTo.Value)
            : (DateTime?)null;
            bool isFromNowToPastFiveDays = (combinedDateTime >= startDateRange && combinedDateTime <= now) || (item.DtUpdated >= startDateRange && item.DtUpdated <= now);
            if ((item.BookingStatus.Equals(BookingStatus.COMPLETED.ToString()) || item.BookingStatus.Equals(BookingStatus.CANCELLED.ToString())) &&
            isFromNowToPastFiveDays )
            {
                var date = item.StartDate.Value.ToString("MMM dd yyyy");
                var timeFrom = new DateTime(item.TimeFrom.Value.Ticks).ToString("h:mm tt").ToUpper();
                var timeTo = new DateTime(item.TimeTo.Value.Ticks).ToString("h:mm tt").ToUpper();
                <li class="user-row">
                    <div class="user-cell" data-label="Room Name">@Html.DisplayFor(modelItem => item.RoomName)</div>
                    <div class="user-cell" data-label="Date">@Html.DisplayFor(modelItem => date)</div>
                    <div class="user-cell" data-label="Time From">@Html.DisplayFor(modelItem => timeFrom)</div>
                    <div class="user-cell" data-label="Time To">@Html.DisplayFor(modelItem => timeTo)</div>
                    <div class="user-cell" data-label="Recurrence">
                        @if (item.Recurrence.Count() == 7)
                        {
                            <text>Daily</text>
                        }
                        else if (item.Recurrence.Count() > 0)
                        {
                            @foreach (var recurrence in item.Recurrence)
                            {
                                var dayName = recurrence.DayOfWeek.DayName.Substring(0, 3);
                                @Html.DisplayFor(modelItem => dayName)
                                if (recurrence != item.Recurrence.Last())
                                {
                                    <text>, </text>
                                }
                            }
                        }
                        else
                        {
                            <text>None</text>
                        }

                    </div>
                    <div class="user-cell" data-label="STATUS"><span class="status">@Html.DisplayFor(modelItem => item.BookingStatus)</span></div>
                </li>
            }
        }

    </ul>
</div>

<div class="dropdown-action">
    <ul>

        <li>
            <button type="button" class="btn-status" onclick="displayModal('#confirmationBookingCancelModal'); passId(this, '#confirmCancelBtn');">
                <i class="fas fa-circle" style="color: #FF0000; font-size: 10px;"></i> Cancel
            </button>
        </li>
        <li>
            <button type="button" class="btn-status" onclick="displayModal('#editBookingModal'); getBookingDetails(this, '#editBookingModal', 'GetBookingDetails', 'Dashboard');">
                <i class="fas fa-edit" style=" font-size: 10px;"></i> Edit
            </button>
        </li>
    </ul>
</div>

@Html.Partial("_EditBookingModal", new ASI.Basecode.Services.ServiceModels.BookingViewModel() { roomList = Model.roomList, Days = Model.Days })
@Html.Partial("_BookingsConfirmationModal")

@section scripts {
    <script>
        
        // for buttons clicks event
        $(document).ready(function () {

            // for preventing the form submission when there is error
            $('#editBookingForm').on('submit', function (e) {
                if ($('#errorMessage').text().trim() !== '') {
                    e.preventDefault();
                    alert('Please correct the errors before submitting the form.');
                }
            });

            // when schedule once btn is clicked, uncheck all the checkboxes in the recurrence part
            $('#scheduleOnceButton').click(function () {
                let checkbox = $('input[type="checkbox"]');
                checkbox.each(function () {
                    $(this).prop('checked', false);
                });
            })


            // for every room change in the dropdown room list
            // checkbooking conflicts everytime
            $('#roomSelect').on('change', function () {
                console.log('========CHANGE========');
                let selectedRoomName = $('#roomSelect option:selected').text().trim();
                console.log(selectedRoomName, '=========');
                $('#roomName').val(selectedRoomName);
                checkBookingConflict();
            });
        })
        
    </script>
}